import {Request} from '../lib/request';
import {Response} from '../lib/response';
import {AWSError} from '../lib/error';
import {Service} from '../lib/service';
import {ServiceConfigurationOptions} from '../lib/service';
import {ConfigBase as Config} from '../lib/config';
interface Blob {}
declare class SimpleDB extends Service {
  
}
declare namespace SimpleDB {
  export interface Attribute {
    /**
     * The name of the attribute.
     */
    Name: String;
    /**
     * 
     */
    AlternateNameEncoding?: String;
    /**
     * The value of the attribute.
     */
    Value: String;
    /**
     * 
     */
    AlternateValueEncoding?: String;
  }
  export type AttributeList = Attribute[];
  export type AttributeNameList = String[];
  export interface BatchDeleteAttributesRequest {
    /**
     * The name of the domain in which the attributes are being deleted.
     */
    DomainName: String;
    /**
     * A list of items on which to perform the operation.
     */
    Items: DeletableItemList;
  }
  export interface BatchPutAttributesRequest {
    /**
     * The name of the domain in which the attributes are being stored.
     */
    DomainName: String;
    /**
     * A list of items on which to perform the operation.
     */
    Items: ReplaceableItemList;
  }
  export type Boolean = boolean;
  export interface CreateDomainRequest {
    /**
     * The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
     */
    DomainName: String;
  }
  export interface DeletableAttribute {
    /**
     * The name of the attribute.
     */
    Name: String;
    /**
     * The value of the attribute.
     */
    Value?: String;
  }
  export type DeletableAttributeList = DeletableAttribute[];
  export interface DeletableItem {
    Name: String;
    Attributes?: DeletableAttributeList;
  }
  export type DeletableItemList = DeletableItem[];
  export interface DeleteAttributesRequest {
    /**
     * The name of the domain in which to perform the operation.
     */
    DomainName: String;
    /**
     * The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
     */
    ItemName: String;
    /**
     * A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
     */
    Attributes?: DeletableAttributeList;
    /**
     * The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
     */
    Expected?: UpdateCondition;
  }
  export interface DeleteDomainRequest {
    /**
     * The name of the domain to delete.
     */
    DomainName: String;
  }
  export interface DomainMetadataRequest {
    /**
     * The name of the domain for which to display the metadata of.
     */
    DomainName: String;
  }
  export interface DomainMetadataResult {
    /**
     * The number of all items in the domain.
     */
    ItemCount?: Integer;
    /**
     * The total size of all item names in the domain, in bytes.
     */
    ItemNamesSizeBytes?: Long;
    /**
     * The number of unique attribute names in the domain.
     */
    AttributeNameCount?: Integer;
    /**
     * The total size of all unique attribute names in the domain, in bytes.
     */
    AttributeNamesSizeBytes?: Long;
    /**
     * The number of all attribute name/value pairs in the domain.
     */
    AttributeValueCount?: Integer;
    /**
     * The total size of all attribute values in the domain, in bytes.
     */
    AttributeValuesSizeBytes?: Long;
    /**
     * The data and time when metadata was calculated, in Epoch (UNIX) seconds.
     */
    Timestamp?: Integer;
  }
  export type DomainNameList = String[];
  export interface GetAttributesRequest {
    /**
     * The name of the domain in which to perform the operation.
     */
    DomainName: String;
    /**
     * The name of the item.
     */
    ItemName: String;
    /**
     * The names of the attributes.
     */
    AttributeNames?: AttributeNameList;
    /**
     * Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
     */
    ConsistentRead?: Boolean;
  }
  export interface GetAttributesResult {
    /**
     * The list of attributes returned by the operation.
     */
    Attributes?: AttributeList;
  }
  export type Integer = number;
  export interface Item {
    /**
     * The name of the item.
     */
    Name: String;
    /**
     * 
     */
    AlternateNameEncoding?: String;
    /**
     * A list of attributes.
     */
    Attributes: AttributeList;
  }
  export type ItemList = Item[];
  export interface ListDomainsRequest {
    /**
     * The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
     */
    MaxNumberOfDomains?: Integer;
    /**
     * A string informing Amazon SimpleDB where to start the next list of domain names.
     */
    NextToken?: String;
  }
  export interface ListDomainsResult {
    /**
     * A list of domain names that match the expression.
     */
    DomainNames?: DomainNameList;
    /**
     * An opaque token indicating that there are more domains than the specified MaxNumberOfDomains still available.
     */
    NextToken?: String;
  }
  export type Long = number;
  export interface PutAttributesRequest {
    /**
     * The name of the domain in which to perform the operation.
     */
    DomainName: String;
    /**
     * The name of the item.
     */
    ItemName: String;
    /**
     * The list of attributes.
     */
    Attributes: ReplaceableAttributeList;
    /**
     * The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
     */
    Expected?: UpdateCondition;
  }
  export interface ReplaceableAttribute {
    /**
     * The name of the replaceable attribute.
     */
    Name: String;
    /**
     * The value of the replaceable attribute.
     */
    Value: String;
    /**
     * A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is false.
     */
    Replace?: Boolean;
  }
  export type ReplaceableAttributeList = ReplaceableAttribute[];
  export interface ReplaceableItem {
    /**
     * The name of the replaceable item.
     */
    Name: String;
    /**
     * The list of attributes for a replaceable item.
     */
    Attributes: ReplaceableAttributeList;
  }
  export type ReplaceableItemList = ReplaceableItem[];
  export interface SelectRequest {
    /**
     * The expression used to query the domain.
     */
    SelectExpression: String;
    /**
     * A string informing Amazon SimpleDB where to start the next list of ItemNames.
     */
    NextToken?: String;
    /**
     * Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If true, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
     */
    ConsistentRead?: Boolean;
  }
  export interface SelectResult {
    /**
     * A list of items that match the select expression.
     */
    Items?: ItemList;
    /**
     * An opaque token indicating that more items than MaxNumberOfItems were matched, the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
     */
    NextToken?: String;
  }
  export type String = string;
  export interface UpdateCondition {
    /**
     * The name of the attribute involved in the condition.
     */
    Name?: String;
    /**
     * The value of an attribute. This value can only be specified when the Exists parameter is equal to true.
     */
    Value?: String;
    /**
     * A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify true if the attribute must exist for the update condition to be satisfied. Specify false if the attribute should not exist in order for the update condition to be satisfied.
     */
    Exists?: Boolean;
  }
  /**
   * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
   */
  export type apiVersion = "2009-04-15"|"latest"|string;
  export interface ClientApiVersions {
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    apiVersion?: apiVersion;
  }
  export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions;
  /**
   * Contains interfaces for use with the SimpleDB client.
   */
  export import Types = SimpleDB;
}
export = SimpleDB;
